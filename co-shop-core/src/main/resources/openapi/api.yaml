openapi: 3.0.3
info:
  title: Group Groceries API
  version: 1.0.1
  description: 'Mobile-first cooperative shopping API for group trips (e.g., ski huts).

    Covers groups, members, products, items (products in a group), proposals (quantity
    suggestions),

    commits (who brings what), and requests (member wants how much). Includes compute
    endpoints for

    planning quantities and fair settlement.

    '
servers:
  - url: https://api.example.com/v1
    description: Production
  - url: http://localhost:8080/v1
    description: Local Dev
tags:
  - name: Groups
  - name: Members
  - name: Products
  - name: Items
  - name: Proposals
  - name: Commits
  - name: Requests
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    GroupIdParam:
      in: path
      name: groupId
      required: true
      schema:
        type: integer
        format: int64
    MemberIdParam:
      in: path
      name: memberId
      required: true
      schema:
        type: integer
        format: int64
    ProductIdParam:
      in: path
      name: productId
      required: true
      schema:
        type: integer
        format: int64
    ItemIdParam:
      in: path
      name: itemId
      required: true
      schema:
        type: integer
        format: int64
    ProposalIdParam:
      in: path
      name: proposalId
      required: true
      schema:
        type: integer
        format: int64
    CommitIdParam:
      in: path
      name: commitId
      required: true
      schema:
        type: integer
        format: int64
    RequestIdParam:
      in: path
      name: requestId
      required: true
      schema:
        type: integer
        format: int64
  schemas:
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
        details:
          type: object
          additionalProperties: true
    Group:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        inviteCode:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    GroupCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
    GroupUpdate:
      type: object
      properties:
        name:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
    Member:
      type: object
      required:
        - id
        - groupId
        - displayName
      properties:
        id:
          type: integer
          format: int64
        groupId:
          type: integer
          format: int64
        userId:
          type: string
          nullable: true
        displayName:
          type: string
        createdAt:
          type: string
          format: date-time
    MemberCreate:
      type: object
      required:
        - displayName
      properties:
        displayName:
          type: string
    MemberUpdate:
      type: object
      properties:
        displayName:
          type: string
    Product:
      type: object
      required:
        - id
        - name
        - unit
      properties:
        id:
          type: string
          format: int64
        name:
          type: string
          example: Bier 6er-Pack
        category:
          type: string
          example: Getr√§nke
        unit:
          type: string
          example: l
        packSize:
          type: number
          example: 6
        priceEstimate:
          type: number
          format: float
          example: 9.9
        isPersonal:
          type: boolean
          default: false
        allergens:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
    ProductCreate:
      type: object
      required:
        - name
        - unit
      properties:
        name:
          type: string
        category:
          type: string
        unit:
          type: string
        packSize:
          type: number
        priceEstimate:
          type: number
          format: float
        isPersonal:
          type: boolean
        allergens:
          type: array
          items:
            type: string
    ProductUpdate:
      type: object
      properties:
        name:
          type: string
        category:
          type: string
        unit:
          type: string
        packSize:
          type: number
        priceEstimate:
          type: number
          format: float
        isPersonal:
          type: boolean
        allergens:
          type: array
          items:
            type: string
    Item:
      type: object
      required:
        - id
        - groupId
      properties:
        id:
          type: integer
          format: int64
        groupId:
          type: integer
          format: int64
        productId:
          type: integer
          format: int64
        unit:
          type: string
        description:
          type: string
        requests:
          type: array
          items:
            $ref: '#/components/schemas/Request'
        proposals:
            type: array
            items:
              $ref: '#/components/schemas/Proposal'
        commits:
            type: array
            items:
              $ref: '#/components/schemas/Commit'
    ItemCreate:
      type: object
      required:
        - productId
      properties:
        productId:
          type: integer
          format: int64
        plannedQty:
          type: number
        unit:
          type: string
        packSize:
          type: number
        description:
          type: string
    ItemUpdate:
      type: object
      properties:
        plannedQty:
          type: number
        roundedQty:
          type: number
        unit:
          type: string
        packSize:
          type: number
        description:
          type: string
    Proposal:
      type: object
      required:
        - id
        - groupId
        - itemId
        - proposerId
        - baseQty
      properties:
        id:
          type: integer
          format: int64
        groupId:
          type: integer
          format: int64
        itemId:
          type: integer
          format: int64
        proposerId:
          type: integer
          format: int64
        baseQty:
          type: number
          example: 1
        perPerson:
          type: boolean
          default: true
        perDay:
          type: boolean
          default: true
        description:
          type: string
        createdAt:
          type: string
          format: date-time
    ProposalCreate:
      type: object
      required:
        - groupId
        - itemId
        - proposerId
        - baseQty
      properties:
        groupId:
          type: integer
          format: int64
        itemId:
          type: integer
          format: int64
        proposerId:
          type: integer
          format: int64
        baseQty:
          type: number
        perPerson:
          type: boolean
        perDay:
          type: boolean
        description:
          type: string
    ProposalUpdate:
      type: object
      properties:
        baseQty:
          type: number
        perPerson:
          type: boolean
        perDay:
          type: boolean
        description:
          type: string
    Commit:
      type: object
      required:
        - id
        - memberId
        - itemId
        - qtyCommitted
      properties:
        id:
          type: integer
          format: int64
        memberId:
          type: integer
          format: int64
        itemId:
          type: integer
          format: int64
        qtyCommitted:
          type: integer
          example: 12
        createdAt:
          type: string
          format: date-time
    CommitCreate:
      type: object
      required:
        - memberId
        - itemId
        - qtyCommitted
      properties:
        memberId:
          type: integer
          format: int64
        itemId:
          type: integer
          format: int64
        qtyCommitted:
          type: integer
        price:
          type: number
          format: float
        commited:
          type: boolean
          default: false
    CommitUpdate:
      type: object
      properties:
        qtyCommitted:
          type: integer
        price:
          type: number
          format: float
        commited:
          type: boolean
          default: false
    Request:
      type: object
      required:
        - id
        - groupId
        - memberId
        - productId
        - qtyRequested
      properties:
        id:
          type: integer
          format: int64
        groupId:
          type: integer
          format: int64
        memberId:
          type: integer
          format: int64
        itemId:
          type: integer
          format: int64
        qtyRequested:
          type: integer
          format: int64
          example: 1
        unitPreference:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
    RequestCreate:
      type: object
      required:
        - memberId
        - itemId
        - qtyRequested
      properties:
        memberId:
          type: integer
          format: int64
        itemId:
          type: integer
          format: int64
        qtyRequested:
          type: integer
          format: int64
        unitPreference:
          type: string
        forEveryone:
          type: boolean
          default: false
    RequestUpdate:
      type: object
      properties:
        qtyRequested:
          type: integer
          format: int64
        unitPreference:
          type: string
paths:
  /groups:
    get:
      tags:
        - Groups
      summary: List groups
      responses:
        '200':
          description: List of groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
      operationId: listGroups
    post:
      tags:
        - Groups
      summary: Create group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreate'
      responses:
        '201':
          description: Group created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
      operationId: createGroup
  /groups/{groupId}:
    get:
      tags:
        - Groups
      summary: Get group
      parameters:
        - $ref: '#/components/parameters/GroupIdParam'
      responses:
        '200':
          description: Group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          description: Not found
      operationId: getGroup
    patch:
      tags:
        - Groups
      summary: Update group
      parameters:
        - $ref: '#/components/parameters/GroupIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
      operationId: updateGroup
    delete:
      tags:
        - Groups
      summary: Delete group
      parameters:
        - $ref: '#/components/parameters/GroupIdParam'
      responses:
        '204':
          description: Deleted
      operationId: deleteGroup
  /groups/{groupId}/join:
    post:
      tags:
        - Groups
      summary: Join a group via invite code
      parameters:
        - $ref: '#/components/parameters/GroupIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - inviteCode
              properties:
                inviteCode:
                  type: string
      responses:
        '200':
          description: Joined
        '400':
          description: Invalid invite
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: joinGroup
  /groups/{groupId}/members:
    get:
      tags:
        - Members
      summary: List members of a group
      parameters:
        - $ref: '#/components/parameters/GroupIdParam'
      responses:
        '200':
          description: Members
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Member'
      operationId: listGroupMembers
    post:
      tags:
        - Members
      summary: Add member to group
      parameters:
        - $ref: '#/components/parameters/GroupIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberCreate'
      responses:
        '201':
          description: Member created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
      operationId: addGroupMember
  /groups/{groupId}/members/{memberId}:
    get:
      tags:
        - Members
      summary: Get member
      parameters:
        - $ref: '#/components/parameters/GroupIdParam'
        - $ref: '#/components/parameters/MemberIdParam'
      responses:
        '200':
          description: Member
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        '404':
          description: Not found
      operationId: getGroupMember
    patch:
      tags:
        - Members
      summary: Update member
      parameters:
        - $ref: '#/components/parameters/GroupIdParam'
        - $ref: '#/components/parameters/MemberIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
      operationId: updateGroupMember
    delete:
      tags:
        - Members
      summary: Remove member
      parameters:
        - $ref: '#/components/parameters/GroupIdParam'
        - $ref: '#/components/parameters/MemberIdParam'
      responses:
        '204':
          description: Deleted
      operationId: removeGroupMember
  /products:
    get:
      tags:
        - Products
      summary: List products (catalog)
      responses:
        '200':
          description: Products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
      operationId: listProducts
    post:
      tags:
        - Products
      summary: Create product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
      operationId: createProduct
  /products/{productId}:
    get:
      tags:
        - Products
      summary: Get product
      parameters:
        - $ref: '#/components/parameters/ProductIdParam'
      responses:
        '200':
          description: Product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Not found
      operationId: getProduct
    patch:
      tags:
        - Products
      summary: Update product
      parameters:
        - $ref: '#/components/parameters/ProductIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
      operationId: updateProduct
    delete:
      tags:
        - Products
      summary: Delete product
      parameters:
        - $ref: '#/components/parameters/ProductIdParam'
      responses:
        '204':
          description: Deleted
      operationId: deleteProduct
  /groups/{groupId}/items:
    get:
      tags:
        - Items
      summary: List items, requests, proposals, and commits in a group
      parameters:
        - $ref: '#/components/parameters/GroupIdParam'
      responses:
        '200':
          description: Items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
      operationId: listGroupItems
    post:
      tags:
        - Items
      summary: Add product to group as an item
      parameters:
        - $ref: '#/components/parameters/GroupIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
      operationId: addGroupItem
  /items/{itemId}:
    get:
      tags:
        - Items
      summary: Get item
      parameters:
        - $ref: '#/components/parameters/ItemIdParam'
      responses:
        '200':
          description: Item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Not found
      operationId: getGroupItem
    patch:
      tags:
        - Items
      summary: Update item
      parameters:
        - $ref: '#/components/parameters/ItemIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
      operationId: updateGroupItem
    delete:
      tags:
        - Items
      summary: Remove item from group
      parameters:
        - $ref: '#/components/parameters/ItemIdParam'
      responses:
        '204':
          description: Deleted
      operationId: removeGroupItem
  /proposals:
    post:
      tags:
        - Proposals
      summary: Create a proposal
      parameters:
        - $ref: '#/components/parameters/GroupIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProposalCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal'
      operationId: createProposal
  /proposals/{proposalId}:
    get:
      tags:
        - Proposals
      summary: Get proposal
      parameters:
        - $ref: '#/components/parameters/ProposalIdParam'
      responses:
        '200':
          description: Proposal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal'
        '404':
          description: Not found
      operationId: getProposal
    patch:
      tags:
        - Proposals
      summary: Update proposal
      parameters:
        - $ref: '#/components/parameters/ProposalIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProposalUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal'
      operationId: updateProposal
    delete:
      tags:
        - Proposals
      summary: Delete proposal
      parameters:
        - $ref: '#/components/parameters/ProposalIdParam'
      responses:
        '204':
          description: Deleted
      operationId: deleteProposal
  /commits:
    get:
      tags:
        - Commits
      summary: List commits in a group
      parameters:
        - $ref: '#/components/parameters/GroupIdParam'
        - in: query
          name: itemId
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Commits
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Commit'
      operationId: listCommits
    post:
      tags:
        - Commits
      summary: Create a commit (member brings quantity of an item)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommitCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Commit'
      operationId: createCommit
  /commits/{commitId}:
    get:
      tags:
        - Commits
      summary: Get commit
      parameters:
        - $ref: '#/components/parameters/CommitIdParam'
      responses:
        '200':
          description: Commit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Commit'
        '404':
          description: Not found
      operationId: getCommit
    patch:
      tags:
        - Commits
      summary: Update commit
      parameters:
        - $ref: '#/components/parameters/CommitIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommitUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Commit'
      operationId: updateCommit
    delete:
      tags:
        - Commits
      summary: Delete commit
      parameters:
        - $ref: '#/components/parameters/CommitIdParam'
      responses:
        '204':
          description: Deleted
      operationId: deleteCommit
  /requests:
    post:
      tags:
        - Requests
      summary: Create a request
      parameters:
        - $ref: '#/components/parameters/GroupIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
      operationId: createRequest
  /requests/{requestId}:
    get:
      tags:
        - Requests
      summary: Get request
      parameters:
        - $ref: '#/components/parameters/RequestIdParam'
      responses:
        '200':
          description: Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
        '404':
          description: Not found
      operationId: getRequest
    patch:
      tags:
        - Requests
      summary: Update request
      parameters:
        - $ref: '#/components/parameters/RequestIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
      operationId: updateRequest
    delete:
      tags:
        - Requests
      summary: Delete request
      parameters:
        - $ref: '#/components/parameters/RequestIdParam'
      responses:
        '204':
          description: Deleted
      operationId: deleteRequest
  /members/{memberId}/groups:
    get:
      tags:
        - Members
      summary: List groups of a member
      parameters:
        - $ref: '#/components/parameters/MemberIdParam'
      responses:
        '200':
          description: Groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
      operationId: listMemberGroups
